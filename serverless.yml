org: lucasmarcelli
app: stonks
service: stonks

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
    - yarn.lock

custom:
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.8
  region: ca-central-1
  environment: 
    STAGE: ${self:provider.stage}
  apiKeys:
    - key
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"


functions:
  handle-event-stream:
    handler: stonks/eventstream.handler
    reservedConcurrency: 10
    events:
      - stream: arn:aws:dynamodb:ca-central-1:914050192047:table/dev-stonks-event/stream/2020-04-27T17:14:38.503

  get-event:
    handler: stonks/queries/event.get
    events:
      - http:
          path: stonks/events/{eventId}
          method: get
          integration: lambda
          cors: true
          private: true
          request:
            parameters:
              paths:
                eventId: true

  get-consumer:
    handler: stonks/queries/consumer.get
    events:
      - http:
          path: stonks/consumers/{consumerId}
          method: get
          integration: lambda
          cors: true
          private: true
          request:
            parameters:
              paths:
                consumerId: true

  create-trade:
    handler: stonks/commands/trades.create
    events:
      - http:
          path: stonks/trades
          method: post
          cors: true
          private: true

  list-trades:
    handler: stonks/queries/trades.list
    events:
      - http:
          path: stonks/trades
          method: get
          cors: true
          private: true
          integration: lambda

  get-trade:
    handler: stonks/queries/trades.get
    events:
      - http:
          path: stonks/trades/{eventId}
          method: get
          integration: lambda
          cors: true
          private: true
          request:
            parameters:
              paths:
                eventId: true

  get-holding:
    handler: stonks/queries/holdings.get
    events:
      - http:
          path: stonks/holdings/{consumerId}
          method: get
          integration: lambda
          cors: true
          private: true
          request:
            parameters:
              paths:
                consumerId: true

  get-holding-by-symbol:
    handler: stonks/queries/holdings.getBySymbol
    events:
      - http:
          path: stonks/holdings
          method: get
          integration: lambda
          cors: true
          private: true
          request:
            parameters:
              querystrings:
                symbol: true
    
  list-holdings:
    handler: stonks/queries/holdings.list
    events:
      - http:
          path: stonks/holdings
          method: get
          cors: true
          private: true
          integration: lambda

resources:
  Resources:
    StonkEventsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: eventId
            AttributeType: S
        KeySchema:
          -
            AttributeName: eventId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.stage}-stonks-event
    StonkConsumerTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: consumerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: consumerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.stage}-stonks-consumer
    


